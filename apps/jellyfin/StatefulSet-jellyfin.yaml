apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: jellyfin
  labels:
    app: jellyfin
spec:
  serviceName: jellyfin
  volumeClaimTemplates:
    - metadata:
        name: jellyfin-config
      spec:
        accessModes: [ "ReadWriteMany" ]
        storageClass: nfs-client
        resources:
          requests:
            storage: 200Mi
    - metadata:
        name: jellyfin-cache
      spec:
        accessModes: [ "ReadWriteMany" ]
        storageClass: nfs-client
        resources:
          requests:
            storage: 200Mi
  podManagementPolicy: OrderedReady
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      partition: 0
  selector:
    matchLabels:
      app.kubernetes.io/name: jellyfin
  replicas: 1
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: jellyfin
    spec:
      containers:
      - name: jellyfin
        image: jellyfin
        imagePullPolicy: IfNotPresent
        securityContext:
          runAsUser: 1000
          runAsGroup: 1000
        resources:
          requests:
            cpu: 100m
            memory: 100Mi
          limits:
            cpu: 2000m
            memory: 4Gi
        livenessProbe:
          tcpSocket:
            port: 8096
          initialDelaySeconds: 5
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
          periodSeconds: 10
        env:
        - name: JELLYFIN_PublishedServerUrl
          value: https://jellyfin.slfhst.io
        ports:
        - containerPort: 8096
          name: http
        volumeMounts:
        - name: jellyfin-config
          mountPath: /config
        - name: jellyfin-cache
          mountPath: /cache
        - name: media
          mountPath: /media

      volumes:
      - name: media
        nfs:
          path: /tank/media
          server: "192.168.1.42"
      restartPolicy: Always
